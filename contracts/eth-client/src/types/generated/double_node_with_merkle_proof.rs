// Generated by Molecule 0.6.1
#![allow(dead_code)]
use molecule :: prelude :: * ;
use super :: basic :: * ;
# [ derive ( Clone ) ] pub struct DoubleNodeWithMerkleProof ( molecule :: bytes :: Bytes ) ; impl :: core :: fmt :: LowerHex for DoubleNodeWithMerkleProof { fn fmt ( & self , f : & mut :: core :: fmt :: Formatter ) -> :: core :: fmt :: Result { use molecule :: hex_string ; if f . alternate ( ) { write ! ( f , "0x" ) ? ; } write ! ( f , "{}" , hex_string ( self . as_slice ( ) ) ) } } impl :: core :: fmt :: Debug for DoubleNodeWithMerkleProof { fn fmt ( & self , f : & mut :: core :: fmt :: Formatter ) -> :: core :: fmt :: Result { write ! ( f , "{}({:#x})" , Self :: NAME , self ) } } impl :: core :: fmt :: Display for DoubleNodeWithMerkleProof { fn fmt ( & self , f : & mut :: core :: fmt :: Formatter ) -> :: core :: fmt :: Result { write ! ( f , "{} {{ " , Self :: NAME ) ? ; write ! ( f , "{}: {}" , "dag_nodes" , self . dag_nodes ( ) ) ? ; write ! ( f , ", {}: {}" , "proof" , self . proof ( ) ) ? ; let extra_count = self . count_extra_fields ( ) ; if extra_count != 0 { write ! ( f , ", .. ({} fields)" , extra_count ) ? ; } write ! ( f , " }}" ) } } impl :: core :: default :: Default for DoubleNodeWithMerkleProof { fn default ( ) -> Self { let v : Vec < u8 > = vec ! [ 20 , 0 , 0 , 0 , 12 , 0 , 0 , 0 , 16 , 0 , 0 , 0 , 4 , 0 , 0 , 0 , 4 , 0 , 0 , 0 , ] ; DoubleNodeWithMerkleProof :: new_unchecked ( v . into ( ) ) } } impl DoubleNodeWithMerkleProof { pub const FIELD_COUNT : usize = 2 ; pub fn total_size ( & self ) -> usize { molecule :: unpack_number ( self . as_slice ( ) ) as usize } pub fn field_count ( & self ) -> usize { if self . total_size ( ) == molecule :: NUMBER_SIZE { 0 } else { ( molecule :: unpack_number ( & self . as_slice ( ) [ molecule :: NUMBER_SIZE .. ] ) as usize / 4 ) - 1 } } pub fn count_extra_fields ( & self ) -> usize { self . field_count ( ) - Self :: FIELD_COUNT } pub fn has_extra_fields ( & self ) -> bool { Self :: FIELD_COUNT != self . field_count ( ) } pub fn dag_nodes ( & self ) -> BytesVec { let slice = self . as_slice ( ) ; let start = molecule :: unpack_number ( & slice [ 4 .. ] ) as usize ; let end = molecule :: unpack_number ( & slice [ 8 .. ] ) as usize ; BytesVec :: new_unchecked ( self . 0 . slice ( start .. end ) ) } pub fn proof ( & self ) -> BytesVec { let slice = self . as_slice ( ) ; let start = molecule :: unpack_number ( & slice [ 8 .. ] ) as usize ; if self . has_extra_fields ( ) { let end = molecule :: unpack_number ( & slice [ 12 .. ] ) as usize ; BytesVec :: new_unchecked ( self . 0 . slice ( start .. end ) ) } else { BytesVec :: new_unchecked ( self . 0 . slice ( start .. ) ) } } pub fn as_reader < 'r > ( & 'r self ) -> DoubleNodeWithMerkleProofReader < 'r > { DoubleNodeWithMerkleProofReader :: new_unchecked ( self . as_slice ( ) ) } } impl molecule :: prelude :: Entity for DoubleNodeWithMerkleProof { type Builder = DoubleNodeWithMerkleProofBuilder ; const NAME : & 'static str = "DoubleNodeWithMerkleProof" ; fn new_unchecked ( data : molecule :: bytes :: Bytes ) -> Self { DoubleNodeWithMerkleProof ( data ) } fn as_bytes ( & self ) -> molecule :: bytes :: Bytes { self . 0 . clone ( ) } fn as_slice ( & self ) -> & [ u8 ] { & self . 0 [ .. ] } fn from_slice ( slice : & [ u8 ] ) -> molecule :: error :: VerificationResult < Self > { DoubleNodeWithMerkleProofReader :: from_slice ( slice ) . map ( | reader | reader . to_entity ( ) ) } fn from_compatible_slice ( slice : & [ u8 ] ) -> molecule :: error :: VerificationResult < Self > { DoubleNodeWithMerkleProofReader :: from_compatible_slice ( slice ) . map ( | reader | reader . to_entity ( ) ) } fn new_builder ( ) -> Self :: Builder { :: core :: default :: Default :: default ( ) } fn as_builder ( self ) -> Self :: Builder { Self :: new_builder ( ) . dag_nodes ( self . dag_nodes ( ) ) . proof ( self . proof ( ) ) } }
# [ derive ( Clone , Copy ) ] pub struct DoubleNodeWithMerkleProofReader < 'r > ( & 'r [ u8 ] ) ; impl < 'r > :: core :: fmt :: LowerHex for DoubleNodeWithMerkleProofReader < 'r > { fn fmt ( & self , f : & mut :: core :: fmt :: Formatter ) -> :: core :: fmt :: Result { use molecule :: hex_string ; if f . alternate ( ) { write ! ( f , "0x" ) ? ; } write ! ( f , "{}" , hex_string ( self . as_slice ( ) ) ) } } impl < 'r > :: core :: fmt :: Debug for DoubleNodeWithMerkleProofReader < 'r > { fn fmt ( & self , f : & mut :: core :: fmt :: Formatter ) -> :: core :: fmt :: Result { write ! ( f , "{}({:#x})" , Self :: NAME , self ) } } impl < 'r > :: core :: fmt :: Display for DoubleNodeWithMerkleProofReader < 'r > { fn fmt ( & self , f : & mut :: core :: fmt :: Formatter ) -> :: core :: fmt :: Result { write ! ( f , "{} {{ " , Self :: NAME ) ? ; write ! ( f , "{}: {}" , "dag_nodes" , self . dag_nodes ( ) ) ? ; write ! ( f , ", {}: {}" , "proof" , self . proof ( ) ) ? ; let extra_count = self . count_extra_fields ( ) ; if extra_count != 0 { write ! ( f , ", .. ({} fields)" , extra_count ) ? ; } write ! ( f , " }}" ) } } impl < 'r > DoubleNodeWithMerkleProofReader < 'r > { pub const FIELD_COUNT : usize = 2 ; pub fn total_size ( & self ) -> usize { molecule :: unpack_number ( self . as_slice ( ) ) as usize } pub fn field_count ( & self ) -> usize { if self . total_size ( ) == molecule :: NUMBER_SIZE { 0 } else { ( molecule :: unpack_number ( & self . as_slice ( ) [ molecule :: NUMBER_SIZE .. ] ) as usize / 4 ) - 1 } } pub fn count_extra_fields ( & self ) -> usize { self . field_count ( ) - Self :: FIELD_COUNT } pub fn has_extra_fields ( & self ) -> bool { Self :: FIELD_COUNT != self . field_count ( ) } pub fn dag_nodes ( & self ) -> BytesVecReader < 'r > { let slice = self . as_slice ( ) ; let start = molecule :: unpack_number ( & slice [ 4 .. ] ) as usize ; let end = molecule :: unpack_number ( & slice [ 8 .. ] ) as usize ; BytesVecReader :: new_unchecked ( & self . as_slice ( ) [ start .. end ] ) } pub fn proof ( & self ) -> BytesVecReader < 'r > { let slice = self . as_slice ( ) ; let start = molecule :: unpack_number ( & slice [ 8 .. ] ) as usize ; if self . has_extra_fields ( ) { let end = molecule :: unpack_number ( & slice [ 12 .. ] ) as usize ; BytesVecReader :: new_unchecked ( & self . as_slice ( ) [ start .. end ] ) } else { BytesVecReader :: new_unchecked ( & self . as_slice ( ) [ start .. ] ) } } } impl < 'r > molecule :: prelude :: Reader < 'r > for DoubleNodeWithMerkleProofReader < 'r > { type Entity = DoubleNodeWithMerkleProof ; const NAME : & 'static str = "DoubleNodeWithMerkleProofReader" ; fn to_entity ( & self ) -> Self :: Entity { Self :: Entity :: new_unchecked ( self . as_slice ( ) . to_owned ( ) . into ( ) ) } fn new_unchecked ( slice : & 'r [ u8 ] ) -> Self { DoubleNodeWithMerkleProofReader ( slice ) } fn as_slice ( & self ) -> & 'r [ u8 ] { self . 0 } fn verify ( slice : & [ u8 ] , compatible : bool ) -> molecule :: error :: VerificationResult < ( ) > { use molecule :: verification_error as ve ; let slice_len = slice . len ( ) ; if slice_len < molecule :: NUMBER_SIZE { return ve ! ( Self , HeaderIsBroken , molecule :: NUMBER_SIZE , slice_len ) ; } let total_size = molecule :: unpack_number ( slice ) as usize ; if slice_len != total_size { return ve ! ( Self , TotalSizeNotMatch , total_size , slice_len ) ; } if slice_len == molecule :: NUMBER_SIZE && Self :: FIELD_COUNT == 0 { return Ok ( ( ) ) ; } if slice_len < molecule :: NUMBER_SIZE * 2 { return ve ! ( Self , HeaderIsBroken , molecule :: NUMBER_SIZE * 2 , slice_len ) ; } let offset_first = molecule :: unpack_number ( & slice [ molecule :: NUMBER_SIZE .. ] ) as usize ; if offset_first % 4 != 0 || offset_first < molecule :: NUMBER_SIZE * 2 { return ve ! ( Self , OffsetsNotMatch ) ; } let field_count = offset_first / 4 - 1 ; if field_count < Self :: FIELD_COUNT { return ve ! ( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ) ; } else if ! compatible && field_count > Self :: FIELD_COUNT { return ve ! ( Self , FieldCountNotMatch , Self :: FIELD_COUNT , field_count ) ; } ; let header_size = molecule :: NUMBER_SIZE * ( field_count + 1 ) ; if slice_len < header_size { return ve ! ( Self , HeaderIsBroken , header_size , slice_len ) ; } let mut offsets : Vec < usize > = slice [ molecule :: NUMBER_SIZE .. ] . chunks ( molecule :: NUMBER_SIZE ) . take ( field_count ) . map ( | x | molecule :: unpack_number ( x ) as usize ) . collect ( ) ; offsets . push ( total_size ) ; if offsets . windows ( 2 ) . any ( | i | i [ 0 ] > i [ 1 ] ) { return ve ! ( Self , OffsetsNotMatch ) ; } BytesVecReader :: verify ( & slice [ offsets [ 0 ] .. offsets [ 1 ] ] , compatible ) ? ; BytesVecReader :: verify ( & slice [ offsets [ 1 ] .. offsets [ 2 ] ] , compatible ) ? ; Ok ( ( ) ) } }
# [ derive ( Debug , Default ) ] pub struct DoubleNodeWithMerkleProofBuilder { pub ( crate ) dag_nodes : BytesVec , pub ( crate ) proof : BytesVec , } impl DoubleNodeWithMerkleProofBuilder { pub const FIELD_COUNT : usize = 2 ; pub fn dag_nodes ( mut self , v : BytesVec ) -> Self { self . dag_nodes = v ; self } pub fn proof ( mut self , v : BytesVec ) -> Self { self . proof = v ; self } } impl molecule :: prelude :: Builder for DoubleNodeWithMerkleProofBuilder { type Entity = DoubleNodeWithMerkleProof ; const NAME : & 'static str = "DoubleNodeWithMerkleProofBuilder" ; fn expected_length ( & self ) -> usize { molecule :: NUMBER_SIZE * ( Self :: FIELD_COUNT + 1 ) + self . dag_nodes . as_slice ( ) . len ( ) + self . proof . as_slice ( ) . len ( ) } fn write < W : :: molecule :: io :: Write > ( & self , writer : & mut W ) -> :: molecule :: io :: Result < ( ) > { let mut total_size = molecule :: NUMBER_SIZE * ( Self :: FIELD_COUNT + 1 ) ; let mut offsets = Vec :: with_capacity ( Self :: FIELD_COUNT ) ; offsets . push ( total_size ) ; total_size += self . dag_nodes . as_slice ( ) . len ( ) ; offsets . push ( total_size ) ; total_size += self . proof . as_slice ( ) . len ( ) ; writer . write_all ( & molecule :: pack_number ( total_size as molecule :: Number ) ) ? ; for offset in offsets . into_iter ( ) { writer . write_all ( & molecule :: pack_number ( offset as molecule :: Number ) ) ? ; } writer . write_all ( self . dag_nodes . as_slice ( ) ) ? ; writer . write_all ( self . proof . as_slice ( ) ) ? ; Ok ( ( ) ) } fn build ( & self ) -> Self :: Entity { let mut inner = Vec :: with_capacity ( self . expected_length ( ) ) ; self . write ( & mut inner ) . unwrap_or_else ( | _ | panic ! ( "{} build should be ok" , Self :: NAME ) ) ; DoubleNodeWithMerkleProof :: new_unchecked ( inner . into ( ) ) } }
